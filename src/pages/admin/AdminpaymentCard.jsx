import React, { useEffect, useState } from "react";

const AdminpaymentCard = ({ onRevenueChange }) => {
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showAllPayments, setShowAllPayments] = useState(false);
  const [courseTotals, setCourseTotals] = useState([]);
  const [selectedCourseId, setSelectedCourseId] = useState("");
  const [showRevenueCard, setShowRevenueCard] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchPayments = async () => {
      setLoading(true);
      setError("");
      try {
        const token = localStorage.getItem("token");
        const res = await fetch("https://eduminds-production-180d.up.railway.app/api/admin/admin-history", {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("Failed to fetch payment history");
        const data = await res.json();
        setPayments(data);

        // Calculate revenue and notify parent
        if (onRevenueChange) {
          const revenue = data.reduce((sum, p) =>
            sum + (p.price || p.amount || (p.course && p.course.price) || 0), 0
          );
          onRevenueChange(revenue);
        }

        // --- New: Calculate total per course for the summary table ---
        const totalsMap = {};
        data.forEach((p) => {
          const course = p.course;
          if (!course || !course._id) return;
          if (!totalsMap[course._id]) {
            totalsMap[course._id] = {
              courseId: course._id,
              title: course.title || "-",
              category: course.category || "-",
              total: 0,
              count: 0,
            };
          }
          const amount = p.price || p.amount || course.price || 0;
          totalsMap[course._id].total += amount;
          totalsMap[course._id].count += 1;
        });
        setCourseTotals(Object.values(totalsMap));
        // Set default filter to all
        setSelectedCourseId("");
      } catch (err) {
        setError(err.message || "Error fetching payment history");
      } finally {
        setLoading(false);
      }
    };
    fetchPayments();
  }, [onRevenueChange]);

  useEffect(() => {
    // Fetch logged-in user info for report header
    const fetchUser = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await fetch("https://eduminds-production-180d.up.railway.app/api/admin/user/me", {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (res.ok) {
          const data = await res.json();
          setUser(data);
        }
      } catch (err) {
        // ignore user fetch error
      }
    };
    fetchUser();
  }, []);

  // Filter payments by selected course
  const filteredPayments = selectedCourseId
    ? payments.filter(
        (p) => p.course && p.course._id === selectedCourseId
      )
    : payments;

  // Download payment summary as CSV
  const handleDownloadSummaryCSV = () => {
    if (!courseTotals.length) return;
    const today = new Date().toISOString().slice(0, 10);
    const csvRows = [];
    csvRows.push(`Organization:,EduMinds`);
    csvRows.push(`Generated By:,${user?.name || ""}`);
    csvRows.push(`Date:,${today}`);
    csvRows.push(""); // empty line
    csvRows.push([
      "Course Title", "Category", "Total Revenue (PKR)", "Total Transactions"
    ].join(","));
    courseTotals.forEach((c) => {
      csvRows.push([
        `"${c.title}"`,
        `"${c.category}"`,
        c.total,
        c.count
      ].join(","));
    });
    const csvContent = csvRows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `payment_summary_${today}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Download payment summary as PDF
  const handleDownloadSummaryPDF = async () => {
    if (!courseTotals.length) return;
    const today = new Date().toISOString().slice(0, 10);
    const jsPDF = (await import('jspdf')).default;
    const autoTable = (await import('jspdf-autotable')).default;
    const doc = new jsPDF();
    doc.setFontSize(14);
    doc.text('EduMinds', 14, 12);
    doc.setFontSize(10);
    doc.text(`Generated By: ${user?.name || ""}`, 14, 18);
    doc.text(`Date: ${today}`, 150, 18);
    doc.setFontSize(12);
    doc.text('Payment Summary Report', 14, 26);
    const tableColumn = [
      "Course Title", "Category", "Total Revenue (PKR)", "Total Transactions"
    ];
    const tableRows = courseTotals.map((c) => [
      c.title,
      c.category,
      c.total,
      c.count
    ]);
    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 32,
      styles: { fontSize: 8 },
      headStyles: { fillColor: [59, 130, 246] },
    });
    doc.save(`payment_summary_${today}.pdf`);
  };

  // --- Download filtered payments as CSV ---
  const handleDownloadFilteredCSV = () => {
    if (!filteredPayments.length) return;
    const today = new Date().toISOString().slice(0, 10);
    const csvRows = [];
    csvRows.push(`Organization:,EduMinds`);
    csvRows.push(`Generated By:,${user?.name || ""}`);
    csvRows.push(`Date:,${today}`);
    csvRows.push(""); // empty line
    csvRows.push([
      "Student Name", "Student Email", "Course Title", "Course Category", "Amount (PKR)", "Payment Date"
    ].join(","));
    filteredPayments.forEach((p) => {
      csvRows.push([
        `"${p.student?.name || "-"}"`,
        `"${p.student?.email || "-"}"`,
        `"${p.course?.title || "-"}"`,
        `"${p.course?.category || "-"}"`,
        p.price || p.amount || (p.course && p.course.price) || "-",
        new Date(p.paymentDate).toLocaleString()
      ].join(","));
    });
    const csvContent = csvRows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `filtered_payments_${today}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // --- Download filtered payments as PDF ---
  const handleDownloadFilteredPDF = async () => {
    if (!filteredPayments.length) return;
    const today = new Date().toISOString().slice(0, 10);
    const jsPDF = (await import('jspdf')).default;
    const autoTable = (await import('jspdf-autotable')).default;
    const doc = new jsPDF();
    doc.setFontSize(14);
    doc.text('EduMinds', 14, 12);
    doc.setFontSize(10);
    doc.text(`Generated By: ${user?.name || ""}`, 14, 18);
    doc.text(`Date: ${today}`, 150, 18);
    doc.setFontSize(12);
    doc.text('Course Payment History', 14, 26);
    const tableColumn = [
      "Student Name", "Student Email", "Course Title", "Course Category", "Amount (PKR)", "Payment Date"
    ];
    const tableRows = filteredPayments.map((p) => [
      p.student?.name || "-",
      p.student?.email || "-",
      p.course?.title || "-",
      p.course?.category || "-",
      p.price || p.amount || (p.course && p.course.price) || "-",
      new Date(p.paymentDate).toLocaleString()
    ]);
    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 32,
      styles: { fontSize: 8 },
      headStyles: { fillColor: [59, 130, 246] },
    });
    doc.save(`filtered_payments_${today}.pdf`);
  };

  if (loading) return <div className="p-4">Loading payment history...</div>;
  if (error) return <div className="p-4 text-red-500">{error}</div>;
  if (!payments.length) return <div className="p-4">No payment history found.</div>;

  return (
    <div className="max-w-6xl mx-auto p-4 md:p-8 min-h-screen bg-gradient-to-br from-blue-50 to-white">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4">
        <div>
          <h2 className="text-3xl md:text-4xl font-extrabold text-blue-800 mb-2">All Payment History</h2>
          <p className="text-gray-600 text-base md:text-lg">
            View all student payments and course purchases.
          </p>
        </div>
        <img
          src="/assets/logo.png"
          alt="Payments"
          className="w-24 h-24 md:w-32 md:h-32 object-contain hidden md:block"
        />
      </div>
      {/* --- New: Button to show/hide revenue card --- */}
      <div className="mb-4 flex flex-wrap gap-2">
        <button
          className="px-4 py-2 rounded bg-blue-600 text-white font-semibold hover:bg-blue-700 transition"
          onClick={() => setShowRevenueCard((prev) => !prev)}
        >
          {showRevenueCard ? "Hide" : "Show"} Total Revenue Per Course
        </button>
        {/* Download summary buttons */}
        <button
          className="px-4 py-2 rounded bg-green-600 text-white font-semibold hover:bg-green-700 transition"
          onClick={handleDownloadSummaryCSV}
        >
          Download Summary CSV
        </button>
        <button
          className="px-4 py-2 rounded bg-red-600 text-white font-semibold hover:bg-red-700 transition"
          onClick={handleDownloadSummaryPDF}
        >
          Download Summary PDF
        </button>
      </div>
      {/* --- New: Revenue card --- */}
      {showRevenueCard && (
        <div className="bg-blue-50 rounded-xl shadow-lg p-4 mb-8">
          <h3 className="text-lg font-bold text-blue-700 mb-2">Total Revenue Per Course</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {courseTotals.length === 0 ? (
              <div className="text-gray-500 col-span-full">No course revenue data.</div>
            ) : (
              courseTotals.map((c) => (
                <div key={c.courseId} className="bg-white rounded-lg shadow p-4 flex flex-col">
                  <span className="font-semibold text-blue-800">{c.title}</span>
                  <span className="text-gray-600 text-sm mb-2">{c.category}</span>
                  <span className="text-xl font-bold text-green-700">
                    PKR {c.total.toLocaleString()}
                  </span>
                  <span className="text-xs text-gray-500 mt-1">
                    {c.count} transaction{c.count !== 1 ? "s" : ""}
                  </span>
                </div>
              ))
            )}
          </div>
        </div>
      )} 
      {/* --- End revenue card --- */}

      <div className="bg-white rounded-xl shadow-lg p-4 mb-8">
        <h3 className="text-xl font-bold text-blue-700 mb-2">Course Revenue Summary</h3>
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white border rounded-xl shadow">
            <thead>
              <tr className="bg-blue-100">
                <th className="py-2 px-4 border-b">Course Title</th>
                <th className="py-2 px-4 border-b">Category</th>
                <th className="py-2 px-4 border-b">Total Revenue (PKR)</th>
                <th className="py-2 px-4 border-b">Total Transactions</th>
              </tr>
            </thead>
            <tbody>
              {courseTotals.length === 0 ? (
                <tr>
                  <td colSpan={4} className="py-2 px-4 text-center text-gray-500">
                    No course revenue data.
                  </td>
                </tr>
              ) : (
                courseTotals.map((c) => (
                  <tr key={c.courseId} className="text-center hover:bg-blue-50 transition">
                    <td className="py-2 px-4 border-b">{c.title}</td>
                    <td className="py-2 px-4 border-b">{c.category}</td>
                    <td className="py-2 px-4 border-b">{c.total.toLocaleString()}</td>
                    <td className="py-2 px-4 border-b">{c.count}</td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
      {/* --- End new table --- */}

      {/* --- New: Course filter dropdown --- */}
      <div className="mb-4 flex flex-col sm:flex-row sm:items-center gap-2 flex-wrap">
        <label className="font-semibold text-blue-700 min-w-max">Filter by Course:</label>
        <select
          className="border rounded px-2 py-1 w-full sm:w-auto"
          value={selectedCourseId}
          onChange={(e) => setSelectedCourseId(e.target.value)}
        >
          <option value="">All Courses</option>
          {courseTotals.map((c) => (
            <option key={c.courseId} value={c.courseId}>
              {c.title}
            </option>
          ))}
        </select>
        {/* --- Download filtered table buttons --- */}
        <button
          className="px-3 py-1 rounded bg-green-500 text-white font-semibold hover:bg-green-600 transition w-full sm:w-auto"
          onClick={handleDownloadFilteredCSV}
        >
          Download Table CSV
        </button>
        <button
          className="px-3 py-1 rounded bg-red-500 text-white font-semibold hover:bg-red-600 transition w-full sm:w-auto"
          onClick={handleDownloadFilteredPDF}
        >
          Download Table PDF
        </button>
      </div>
      {/* --- End filter --- */}

      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border rounded-xl shadow-lg">
          <thead>
            <tr className="bg-blue-100">
              <th className="py-2 px-4 border-b">Student Name</th>
              <th className="py-2 px-4 border-b">Student Email</th>
              <th className="py-2 px-4 border-b">Course Title</th>
              <th className="py-2 px-4 border-b">Course Category</th>
              <th className="py-2 px-4 border-b">Amount (PKR)</th>
              <th className="py-2 px-4 border-b">Payment Date</th>
            </tr>
          </thead>
          <tbody>
            {/* Only show first 2 if not expanded, else show all */}
            {(showAllPayments ? filteredPayments : filteredPayments.slice(0, 2)).map((p) => (
              <tr key={p._id} className="text-center hover:bg-blue-50 transition">
                <td className="py-2 px-4 border-b">{p.student?.name || "-"}</td>
                <td className="py-2 px-4 border-b">{p.student?.email || "-"}</td>
                <td className="py-2 px-4 border-b">{p.course?.title || "-"}</td>
                <td className="py-2 px-4 border-b">{p.course?.category || "-"}</td>
                <td className="py-2 px-4 border-b">
                  {p.price || p.amount || (p.course && p.course.price) || "-"}
                </td>
                <td className="py-2 px-4 border-b">{new Date(p.paymentDate).toLocaleString()}</td>
              </tr>
            ))}
            {filteredPayments.length === 0 && (
              <tr>
                <td colSpan={6} className="py-2 px-4 text-center text-gray-500">
                  No payment history found.
                </td>
              </tr>
            )}
          </tbody>
        </table>
        {/* Expand/Collapse Button */}
        {filteredPayments.length > 2 && (
          <div className="flex justify-center mt-4">
            <button
              className="px-4 py-1 rounded bg-blue-100 text-blue-700 font-semibold hover:bg-blue-200 transition"
              onClick={() => setShowAllPayments((prev) => !prev)}
            >
              {showAllPayments ? "Show Less" : `Show All (${filteredPayments.length})`}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};


export default AdminpaymentCard;
